tx_rx_pairs = [[10, 11], [10, 12], [11, 10], [11, 12], [12, 10], [12, 11]] with length 6 and tx_users = [10, 11, 12] with length 3
user list = [10, 11, 12]
UAV list  = [0]
self.n_users = 3, self.n_UAVs = 1, self.act_coverage = {0: [10, 11, 12]}, self.update_loss = {(10, 11): -1, (10, 12): -1, (11, 10): -1, (11, 12): -1, (12, 10): -1, (12, 11): -1}, self.sample_loss = {10: -1, 11: -1, 12: -1}, self.UAV_list = [0], self.user_list = [10, 11, 12]

eval_net has a action_space of size  (18, 2)

eval_net started and age_dist_UAV = {10: [], 11: [], 12: []}, age_dist_dest = {(10, 11): [], (10, 12): [], (11, 10): [], (11, 12): [], (12, 10): [], (12, 11): []}, tx_attempt_dest = {(10, 11): [], (10, 12): [], (11, 10): [], (11, 12): [], (12, 10): [], (12, 11): []}, tx_attempt_UAV = {10: [], 11: [], 12: []}


eval_net after reset, episode 1 begins with self._state = [1 1 1 1 1 1 1 1 1 1] with shape (10,) when CSI_as_state = False and sample_error_in_CSI = False

age difference of users at dest is {(10, 11): 0, (10, 12): 0, (11, 10): 0, (11, 12): 0, (12, 10): 0, (12, 11): 0} where age at dest is {(10, 11): 1, (10, 12): 1, (11, 10): 1, (11, 12): 1, (12, 10): 1, (12, 11): 1}, age at UAV is {10: 1, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 0, (10, 12): 0, (11, 10): 0, (11, 12): 0, (12, 10): 0, (12, 11): 0}
updated_users = [[11, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 1} when the general UAV age was {10: 1, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 12]
sampled_users = [10, 12]
updated_users are [[11, 10]], sampled_users = [10, 12], mad_action = [([10, 12], [[11, 10]])], actual_mad_action = 8


current episode = 3


 step = 1, mad selection is 8, actual action is [(10, 12), ([11, 10],)], updated_users = [[11, 10]], sampled_users = [10, 12]
 for user 10, chance_sample_loss = 0.65 and eval_env.sample_loss = -1 
slot =  0  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.06 and eval_env.sample_loss = -1 
slot =  0  - user  12  period =  1  was selected to sample and sampled
time = 1, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1]}
tx_attempt_UAV has become {10: [1], 11: [0], 12: [1]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}

 step = 1 of episode 3 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 2, (12, 10): 2, (12, 11): 2} with sum = 12, tx_attempt_UAV = {10: [1], 11: [0], 12: [1]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 2
episode_wise_success_sample = 2
episode_wise_attempt_update = 0
episode_wise_success_update = 0
age difference of users at dest is {(10, 11): 1, (10, 12): 1, (11, 10): 0, (11, 12): 0, (12, 10): 1, (12, 11): 1} where age at dest is {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 2, (12, 10): 2, (12, 11): 2}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 1, (10, 12): 1, (11, 10): 0, (11, 12): 0, (12, 10): 1, (12, 11): 1}
updated_users = [[10, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 10]
sampled_users = [11, 10]
updated_users are [[10, 12]], sampled_users = [10, 11], mad_action = [([11, 10], [[10, 12]])], actual_mad_action = 1


current episode = 3


 step = 2, mad selection is 1, actual action is [(10, 11), ([10, 12],)], updated_users = [[10, 12]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
for pair [10, 12], chance_update_loss = 0.81 and eval_env.update_loss = -1 
pair [10, 12] was selected to be updated. so pair [10, 12]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.87 and eval_env.sample_loss = -1 
slot =  1  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.08 and eval_env.sample_loss = -1 
slot =  1  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 2, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1]}
tx_attempt_UAV has become {10: [2], 11: [1], 12: [1]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [1], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}

 step = 2 of episode 3 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 3, (10, 12): 2, (11, 10): 3, (11, 12): 3, (12, 10): 3, (12, 11): 3} with sum = 17, tx_attempt_UAV = {10: [2], 11: [1], 12: [1]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [1], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 4
episode_wise_success_sample = 4
episode_wise_attempt_update = 1
episode_wise_success_update = 1
age difference of users at dest is {(10, 11): 2, (10, 12): 1, (11, 10): 2, (11, 12): 2, (12, 10): 1, (12, 11): 1} where age at dest is {(10, 11): 3, (10, 12): 2, (11, 10): 3, (11, 12): 3, (12, 10): 3, (12, 11): 3}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 2, (10, 12): 1, (11, 10): 2, (11, 12): 2, (12, 10): 1, (12, 11): 1}
updated_users = [[11, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 11]
sampled_users = [12, 11]
updated_users are [[11, 12]], sampled_users = [11, 12], mad_action = [([12, 11], [[11, 12]])], actual_mad_action = 15


current episode = 3


 step = 3, mad selection is 15, actual action is [(11, 12), ([11, 12],)], updated_users = [[11, 12]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
for pair [11, 12], chance_update_loss = 0.18 and eval_env.update_loss = -1 
pair [11, 12] was selected to be updated. so pair [11, 12]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.55 and eval_env.sample_loss = -1 
slot =  2  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.04 and eval_env.sample_loss = -1 
slot =  2  - user  12  period =  1  was selected to sample and sampled
time = 3, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3]}
tx_attempt_UAV has become {10: [2], 11: [2], 12: [2]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [1], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}

 step = 3 of episode 3 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 4, (10, 12): 3, (11, 10): 4, (11, 12): 2, (12, 10): 4, (12, 11): 4} with sum = 21, tx_attempt_UAV = {10: [2], 11: [2], 12: [2]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [1], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 6
episode_wise_success_sample = 6
episode_wise_attempt_update = 2
episode_wise_success_update = 2
age difference of users at dest is {(10, 11): 2, (10, 12): 1, (11, 10): 3, (11, 12): 1, (12, 10): 3, (12, 11): 3} where age at dest is {(10, 11): 4, (10, 12): 3, (11, 10): 4, (11, 12): 2, (12, 10): 4, (12, 11): 4}, age at UAV is {10: 2, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 2, (10, 12): 1, (11, 10): 3, (11, 12): 1, (12, 10): 3, (12, 11): 3}
updated_users = [[11, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 2, 11: 1, 12: 1} when the general UAV age was {10: 2, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 11]
sampled_users = [10, 11]
updated_users are [[11, 10]], sampled_users = [10, 11], mad_action = [([10, 11], [[11, 10]])], actual_mad_action = 2


current episode = 3


 step = 4, mad selection is 2, actual action is [(10, 11), ([11, 10],)], updated_users = [[11, 10]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
for pair [11, 10], chance_update_loss = 0.11 and eval_env.update_loss = -1 
pair [11, 10] was selected to be updated. so pair [11, 10]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.49 and eval_env.sample_loss = -1 
slot =  3  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.31 and eval_env.sample_loss = -1 
slot =  3  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 4, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3]}
tx_attempt_UAV has become {10: [3], 11: [3], 12: [2]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [0], (12, 11): [0]}

 step = 4 of episode 3 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 5, (10, 12): 4, (11, 10): 2, (11, 12): 3, (12, 10): 5, (12, 11): 5} with sum = 24, tx_attempt_UAV = {10: [3], 11: [3], 12: [2]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 8
episode_wise_success_sample = 8
episode_wise_attempt_update = 3
episode_wise_success_update = 3
age difference of users at dest is {(10, 11): 4, (10, 12): 3, (11, 10): 1, (11, 12): 2, (12, 10): 3, (12, 11): 3} where age at dest is {(10, 11): 5, (10, 12): 4, (11, 10): 2, (11, 12): 3, (12, 10): 5, (12, 11): 5}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 4, (10, 12): 3, (11, 10): 1, (11, 12): 2, (12, 10): 3, (12, 11): 3}
updated_users = [[10, 11]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 10]
sampled_users = [12, 10]
updated_users are [[10, 11]], sampled_users = [10, 12], mad_action = [([12, 10], [[10, 11]])], actual_mad_action = 6


current episode = 3


 step = 5, mad selection is 6, actual action is [(10, 12), ([10, 11],)], updated_users = [[10, 11]], sampled_users = [10, 12]
for pair [10, 11], chance_update_loss = 0.22 and eval_env.update_loss = -1 
pair [10, 11] was selected to be updated. so pair [10, 11]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.65 and eval_env.sample_loss = -1 
slot =  4  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.52 and eval_env.sample_loss = -1 
slot =  4  - user  12  period =  1  was selected to sample and sampled
time = 5, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5]}
tx_attempt_UAV has become {10: [4], 11: [3], 12: [3]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [0], (12, 11): [0]}

 step = 5 of episode 3 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 2, (10, 12): 5, (11, 10): 3, (11, 12): 4, (12, 10): 6, (12, 11): 6} with sum = 26, tx_attempt_UAV = {10: [4], 11: [3], 12: [3]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 10
episode_wise_success_sample = 10
episode_wise_attempt_update = 4
episode_wise_success_update = 4
age difference of users at dest is {(10, 11): 1, (10, 12): 4, (11, 10): 1, (11, 12): 2, (12, 10): 5, (12, 11): 5} where age at dest is {(10, 11): 2, (10, 12): 5, (11, 10): 3, (11, 12): 4, (12, 10): 6, (12, 11): 6}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 1, (10, 12): 4, (11, 10): 1, (11, 12): 2, (12, 10): 5, (12, 11): 5}
updated_users = [[12, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 10]
sampled_users = [11, 10]
updated_users are [[12, 10]], sampled_users = [10, 11], mad_action = [([11, 10], [[12, 10]])], actual_mad_action = 4


current episode = 3


 step = 6, mad selection is 4, actual action is [(10, 11), ([12, 10],)], updated_users = [[12, 10]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
for pair [12, 10], chance_update_loss = 0.36 and eval_env.update_loss = -1 
pair [12, 10] was selected to be updated. so pair [12, 10]'s age at dest will become 12's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.18 and eval_env.sample_loss = -1 
slot =  5  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.66 and eval_env.sample_loss = -1 
slot =  5  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 6, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5]}
tx_attempt_UAV has become {10: [5], 11: [4], 12: [3]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [0]}

 step = 6 of episode 3 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 3, (10, 12): 6, (11, 10): 4, (11, 12): 5, (12, 10): 2, (12, 11): 7} with sum = 27, tx_attempt_UAV = {10: [5], 11: [4], 12: [3]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [0]}
episode_wise_attempt_sample = 12
episode_wise_success_sample = 12
episode_wise_attempt_update = 5
episode_wise_success_update = 5
age difference of users at dest is {(10, 11): 2, (10, 12): 5, (11, 10): 3, (11, 12): 4, (12, 10): 0, (12, 11): 5} where age at dest is {(10, 11): 3, (10, 12): 6, (11, 10): 4, (11, 12): 5, (12, 10): 2, (12, 11): 7}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 2, (10, 12): 5, (11, 10): 3, (11, 12): 4, (12, 10): 0, (12, 11): 5}
updated_users = [[10, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 11]
sampled_users = [12, 11]
updated_users are [[10, 12]], sampled_users = [11, 12], mad_action = [([12, 11], [[10, 12]])], actual_mad_action = 13


current episode = 3


 step = 7, mad selection is 13, actual action is [(11, 12), ([10, 12],)], updated_users = [[10, 12]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
for pair [10, 12], chance_update_loss = 0.3 and eval_env.update_loss = -1 
pair [10, 12] was selected to be updated. so pair [10, 12]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.07 and eval_env.sample_loss = -1 
slot =  6  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.07 and eval_env.sample_loss = -1 
slot =  6  - user  12  period =  1  was selected to sample and sampled
time = 7, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7]}
tx_attempt_UAV has become {10: [5], 11: [5], 12: [4]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [0]}

 step = 7 of episode 3 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 4, (10, 12): 2, (11, 10): 5, (11, 12): 6, (12, 10): 3, (12, 11): 8} with sum = 28, tx_attempt_UAV = {10: [5], 11: [5], 12: [4]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [0]}
episode_wise_attempt_sample = 14
episode_wise_success_sample = 14
episode_wise_attempt_update = 6
episode_wise_success_update = 6
age difference of users at dest is {(10, 11): 2, (10, 12): 0, (11, 10): 4, (11, 12): 5, (12, 10): 2, (12, 11): 7} where age at dest is {(10, 11): 4, (10, 12): 2, (11, 10): 5, (11, 12): 6, (12, 10): 3, (12, 11): 8}, age at UAV is {10: 2, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 2, (10, 12): 0, (11, 10): 4, (11, 12): 5, (12, 10): 2, (12, 11): 7}
updated_users = [[12, 11]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 2, 11: 1, 12: 1} when the general UAV age was {10: 2, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 11]
sampled_users = [10, 11]
updated_users are [[12, 11]], sampled_users = [10, 11], mad_action = [([10, 11], [[12, 11]])], actual_mad_action = 5


current episode = 3


 step = 8, mad selection is 5, actual action is [(10, 11), ([12, 11],)], updated_users = [[12, 11]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
for pair [12, 11], chance_update_loss = 0.39 and eval_env.update_loss = -1 
pair [12, 11] was selected to be updated. so pair [12, 11]'s age at dest will become 12's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
 for user 10, chance_sample_loss = 0.66 and eval_env.sample_loss = -1 
slot =  7  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.23 and eval_env.sample_loss = -1 
slot =  7  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 8, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7]}
tx_attempt_UAV has become {10: [6], 11: [6], 12: [4]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [1]}

 step = 8 of episode 3 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 5, (10, 12): 3, (11, 10): 6, (11, 12): 7, (12, 10): 4, (12, 11): 2} with sum = 27, tx_attempt_UAV = {10: [6], 11: [6], 12: [4]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 16
episode_wise_success_sample = 16
episode_wise_attempt_update = 7
episode_wise_success_update = 7
age difference of users at dest is {(10, 11): 4, (10, 12): 2, (11, 10): 5, (11, 12): 6, (12, 10): 2, (12, 11): 0} where age at dest is {(10, 11): 5, (10, 12): 3, (11, 10): 6, (11, 12): 7, (12, 10): 4, (12, 11): 2}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 4, (10, 12): 2, (11, 10): 5, (11, 12): 6, (12, 10): 2, (12, 11): 0}
updated_users = [[11, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 10]
sampled_users = [12, 10]
updated_users are [[11, 12]], sampled_users = [10, 12], mad_action = [([12, 10], [[11, 12]])], actual_mad_action = 9


current episode = 3


 step = 9, mad selection is 9, actual action is [(10, 12), ([11, 12],)], updated_users = [[11, 12]], sampled_users = [10, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
for pair [11, 12], chance_update_loss = 0.68 and eval_env.update_loss = -1 
pair [11, 12] was selected to be updated. so pair [11, 12]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.11 and eval_env.sample_loss = -1 
slot =  8  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.17 and eval_env.sample_loss = -1 
slot =  8  - user  12  period =  1  was selected to sample and sampled
time = 9, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9]}
tx_attempt_UAV has become {10: [7], 11: [6], 12: [5]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}

 step = 9 of episode 3 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 6, (10, 12): 4, (11, 10): 7, (11, 12): 2, (12, 10): 5, (12, 11): 3} with sum = 27, tx_attempt_UAV = {10: [7], 11: [6], 12: [5]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [2], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 18
episode_wise_success_sample = 18
episode_wise_attempt_update = 8
episode_wise_success_update = 8
age difference of users at dest is {(10, 11): 5, (10, 12): 3, (11, 10): 5, (11, 12): 0, (12, 10): 4, (12, 11): 2} where age at dest is {(10, 11): 6, (10, 12): 4, (11, 10): 7, (11, 12): 2, (12, 10): 5, (12, 11): 3}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 5, (10, 12): 3, (11, 10): 5, (11, 12): 0, (12, 10): 4, (12, 11): 2}
updated_users = [[11, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 12]
sampled_users = [11, 12]
updated_users are [[11, 10]], sampled_users = [11, 12], mad_action = [([11, 12], [[11, 10]])], actual_mad_action = 14


current episode = 3


 step = 10, mad selection is 14, actual action is [(11, 12), ([11, 10],)], updated_users = [[11, 10]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
for pair [11, 10], chance_update_loss = 0.46 and eval_env.update_loss = -1 
pair [11, 10] was selected to be updated. so pair [11, 10]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=3
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.22 and eval_env.sample_loss = -1 
slot =  9  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.53 and eval_env.sample_loss = -1 
slot =  9  - user  12  period =  1  was selected to sample and sampled
time = 10, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10]}
tx_attempt_UAV has become {10: [7], 11: [7], 12: [6]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [2], (11, 10): [2], (11, 12): [2], (12, 10): [1], (12, 11): [1]}

 step = 10 of episode 3 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 7, (10, 12): 5, (11, 10): 3, (11, 12): 3, (12, 10): 6, (12, 11): 4} with sum = 28, tx_attempt_UAV = {10: [7], 11: [7], 12: [6]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [2], (11, 10): [2], (11, 12): [2], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 20
episode_wise_success_sample = 20
episode_wise_attempt_update = 9
episode_wise_success_update = 9
age_dist_UAV = {10: [2, 1, 2, 2], 11: [1, 1, 1, 1], 12: [1, 2, 1, 1]}, age_dist_dest = {(10, 11): [7, 5, 2, 7], (10, 12): [5, 8, 5, 5], (11, 10): [6, 3, 7, 3], (11, 12): [2, 6, 4, 3], (12, 10): [3, 4, 6, 6], (12, 11): [4, 2, 3, 4]}
results for step 10 of episode 3
attempt_sample = [20, 20, 20, 20]
success_sample = [20, 20, 20, 20]
attempt_update = [9, 9, 9, 9]
success_update = [9, 9, 9, 9]

*****************************************************



tx_rx_pairs = [[10, 11], [10, 12], [11, 10], [11, 12], [12, 10], [12, 11]] with length 6 and tx_users = [10, 11, 12] with length 3
user list = [10, 11, 12]
UAV list  = [0]
self.n_users = 3, self.n_UAVs = 1, self.act_coverage = {0: [10, 11, 12]}, self.update_loss = {(10, 11): -1, (10, 12): -1, (11, 10): -1, (11, 12): -1, (12, 10): -1, (12, 11): -1}, self.sample_loss = {10: -1, 11: -1, 12: -1}, self.UAV_list = [0], self.user_list = [10, 11, 12]

eval_net has a action_space of size  (18, 2)

eval_net started and age_dist_UAV = {10: [], 11: [], 12: []}, age_dist_dest = {(10, 11): [], (10, 12): [], (11, 10): [], (11, 12): [], (12, 10): [], (12, 11): []}, tx_attempt_dest = {(10, 11): [], (10, 12): [], (11, 10): [], (11, 12): [], (12, 10): [], (12, 11): []}, tx_attempt_UAV = {10: [], 11: [], 12: []}


eval_net after reset, episode 1 begins with self._state = [1 1 1 1 1 1 1 1 1 1] with shape (10,) when CSI_as_state = False and sample_error_in_CSI = False

age difference of users at dest is {(10, 11): 0, (10, 12): 0, (11, 10): 0, (11, 12): 0, (12, 10): 0, (12, 11): 0} where age at dest is {(10, 11): 1, (10, 12): 1, (11, 10): 1, (11, 12): 1, (12, 10): 1, (12, 11): 1}, age at UAV is {10: 1, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 0, (10, 12): 0, (11, 10): 0, (11, 12): 0, (12, 10): 0, (12, 11): 0}
updated_users = [[10, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 1} when the general UAV age was {10: 1, 11: 1, 12: 1}
users sampled under UAV 0 are [11, 12]
sampled_users = [11, 12]
updated_users are [[10, 12]], sampled_users = [11, 12], mad_action = [([11, 12], [[10, 12]])], actual_mad_action = 13


current episode = 4


 step = 1, mad selection is 13, actual action is [(11, 12), ([10, 12],)], updated_users = [[10, 12]], sampled_users = [11, 12]
user  10  was not sampled
 for user 11, chance_sample_loss = 0.24 and eval_env.sample_loss = -1 
slot =  0  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.63 and eval_env.sample_loss = -1 
slot =  0  - user  12  period =  1  was selected to sample and sampled
time = 1, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1]}
tx_attempt_UAV has become {10: [0], 11: [1], 12: [1]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}

 step = 1 of episode 4 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 2, (12, 10): 2, (12, 11): 2} with sum = 12, tx_attempt_UAV = {10: [0], 11: [1], 12: [1]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [0], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 2
episode_wise_success_sample = 2
episode_wise_attempt_update = 0
episode_wise_success_update = 0
age difference of users at dest is {(10, 11): 0, (10, 12): 0, (11, 10): 1, (11, 12): 1, (12, 10): 1, (12, 11): 1} where age at dest is {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 2, (12, 10): 2, (12, 11): 2}, age at UAV is {10: 2, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 0, (10, 12): 0, (11, 10): 1, (11, 12): 1, (12, 10): 1, (12, 11): 1}
updated_users = [[11, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 2, 11: 1, 12: 1} when the general UAV age was {10: 2, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 11]
sampled_users = [10, 11]
updated_users are [[11, 12]], sampled_users = [10, 11], mad_action = [([10, 11], [[11, 12]])], actual_mad_action = 3


current episode = 4


 step = 2, mad selection is 3, actual action is [(10, 11), ([11, 12],)], updated_users = [[11, 12]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
for pair [11, 12], chance_update_loss = 0.2 and eval_env.update_loss = -1 
pair [11, 12] was selected to be updated. so pair [11, 12]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.61 and eval_env.sample_loss = -1 
slot =  1  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.61 and eval_env.sample_loss = -1 
slot =  1  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 2, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1]}
tx_attempt_UAV has become {10: [1], 11: [2], 12: [1]} and tx_attempt_dest has become {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}

 step = 2 of episode 4 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 3, (10, 12): 3, (11, 10): 3, (11, 12): 2, (12, 10): 3, (12, 11): 3} with sum = 17, tx_attempt_UAV = {10: [1], 11: [2], 12: [1]}, tx_attempt_dest = {(10, 11): [0], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 4
episode_wise_success_sample = 4
episode_wise_attempt_update = 1
episode_wise_success_update = 1
age difference of users at dest is {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 1, (12, 10): 1, (12, 11): 1} where age at dest is {(10, 11): 3, (10, 12): 3, (11, 10): 3, (11, 12): 2, (12, 10): 3, (12, 11): 3}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 2, (10, 12): 2, (11, 10): 2, (11, 12): 1, (12, 10): 1, (12, 11): 1}
updated_users = [[10, 11]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 10]
sampled_users = [12, 10]
updated_users are [[10, 11]], sampled_users = [10, 12], mad_action = [([12, 10], [[10, 11]])], actual_mad_action = 6


current episode = 4


 step = 3, mad selection is 6, actual action is [(10, 12), ([10, 11],)], updated_users = [[10, 11]], sampled_users = [10, 12]
for pair [10, 11], chance_update_loss = 0.01 and eval_env.update_loss = -1 
pair [10, 11] was selected to be updated. so pair [10, 11]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.55 and eval_env.sample_loss = -1 
slot =  2  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.14 and eval_env.sample_loss = -1 
slot =  2  - user  12  period =  1  was selected to sample and sampled
time = 3, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3]}
tx_attempt_UAV has become {10: [2], 11: [2], 12: [2]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}

 step = 3 of episode 4 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 2, (10, 12): 4, (11, 10): 4, (11, 12): 3, (12, 10): 4, (12, 11): 4} with sum = 21, tx_attempt_UAV = {10: [2], 11: [2], 12: [2]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [0], (12, 11): [0]}
episode_wise_attempt_sample = 6
episode_wise_success_sample = 6
episode_wise_attempt_update = 2
episode_wise_success_update = 2
age difference of users at dest is {(10, 11): 1, (10, 12): 3, (11, 10): 2, (11, 12): 1, (12, 10): 3, (12, 11): 3} where age at dest is {(10, 11): 2, (10, 12): 4, (11, 10): 4, (11, 12): 3, (12, 10): 4, (12, 11): 4}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 1, (10, 12): 3, (11, 10): 2, (11, 12): 1, (12, 10): 3, (12, 11): 3}
updated_users = [[12, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 12]
sampled_users = [11, 12]
updated_users are [[12, 10]], sampled_users = [11, 12], mad_action = [([11, 12], [[12, 10]])], actual_mad_action = 16


current episode = 4


 step = 4, mad selection is 16, actual action is [(11, 12), ([12, 10],)], updated_users = [[12, 10]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
for pair [12, 10], chance_update_loss = 0.77 and eval_env.update_loss = -1 
pair [12, 10] was selected to be updated. so pair [12, 10]'s age at dest will become 12's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.51 and eval_env.sample_loss = -1 
slot =  3  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.06 and eval_env.sample_loss = -1 
slot =  3  - user  12  period =  1  was selected to sample and sampled
time = 4, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4]}
tx_attempt_UAV has become {10: [2], 11: [3], 12: [3]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [0]}

 step = 4 of episode 4 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 3, (10, 12): 5, (11, 10): 5, (11, 12): 4, (12, 10): 2, (12, 11): 5} with sum = 24, tx_attempt_UAV = {10: [2], 11: [3], 12: [3]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [0]}
episode_wise_attempt_sample = 8
episode_wise_success_sample = 8
episode_wise_attempt_update = 3
episode_wise_success_update = 3
age difference of users at dest is {(10, 11): 1, (10, 12): 3, (11, 10): 4, (11, 12): 3, (12, 10): 1, (12, 11): 4} where age at dest is {(10, 11): 3, (10, 12): 5, (11, 10): 5, (11, 12): 4, (12, 10): 2, (12, 11): 5}, age at UAV is {10: 2, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 1, (10, 12): 3, (11, 10): 4, (11, 12): 3, (12, 10): 1, (12, 11): 4}
updated_users = [[12, 11]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 2, 11: 1, 12: 1} when the general UAV age was {10: 2, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 11]
sampled_users = [10, 11]
updated_users are [[12, 11]], sampled_users = [10, 11], mad_action = [([10, 11], [[12, 11]])], actual_mad_action = 5


current episode = 4


 step = 5, mad selection is 5, actual action is [(10, 11), ([12, 11],)], updated_users = [[12, 11]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
for pair [12, 11], chance_update_loss = 0.84 and eval_env.update_loss = -1 
pair [12, 11] was selected to be updated. so pair [12, 11]'s age at dest will become 12's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
 for user 10, chance_sample_loss = 0.48 and eval_env.sample_loss = -1 
slot =  4  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.21 and eval_env.sample_loss = -1 
slot =  4  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 5, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4]}
tx_attempt_UAV has become {10: [3], 11: [4], 12: [3]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [1]}

 step = 5 of episode 4 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 4, (10, 12): 6, (11, 10): 6, (11, 12): 5, (12, 10): 3, (12, 11): 2} with sum = 26, tx_attempt_UAV = {10: [3], 11: [4], 12: [3]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [0], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 10
episode_wise_success_sample = 10
episode_wise_attempt_update = 4
episode_wise_success_update = 4
age difference of users at dest is {(10, 11): 3, (10, 12): 5, (11, 10): 5, (11, 12): 4, (12, 10): 1, (12, 11): 0} where age at dest is {(10, 11): 4, (10, 12): 6, (11, 10): 6, (11, 12): 5, (12, 10): 3, (12, 11): 2}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 3, (10, 12): 5, (11, 10): 5, (11, 12): 4, (12, 10): 1, (12, 11): 0}
updated_users = [[10, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 11]
sampled_users = [12, 11]
updated_users are [[10, 12]], sampled_users = [11, 12], mad_action = [([12, 11], [[10, 12]])], actual_mad_action = 13


current episode = 4


 step = 6, mad selection is 13, actual action is [(11, 12), ([10, 12],)], updated_users = [[10, 12]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
for pair [10, 12], chance_update_loss = 0.36 and eval_env.update_loss = -1 
pair [10, 12] was selected to be updated. so pair [10, 12]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.77 and eval_env.sample_loss = -1 
slot =  5  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.46 and eval_env.sample_loss = -1 
slot =  5  - user  12  period =  1  was selected to sample and sampled
time = 6, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5, 6], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4, 6]}
tx_attempt_UAV has become {10: [3], 11: [5], 12: [4]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [1], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [1]}

 step = 6 of episode 4 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 5, (10, 12): 2, (11, 10): 7, (11, 12): 6, (12, 10): 4, (12, 11): 3} with sum = 27, tx_attempt_UAV = {10: [3], 11: [5], 12: [4]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [1], (11, 10): [0], (11, 12): [1], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 12
episode_wise_success_sample = 12
episode_wise_attempt_update = 5
episode_wise_success_update = 5
age difference of users at dest is {(10, 11): 3, (10, 12): 0, (11, 10): 6, (11, 12): 5, (12, 10): 3, (12, 11): 2} where age at dest is {(10, 11): 5, (10, 12): 2, (11, 10): 7, (11, 12): 6, (12, 10): 4, (12, 11): 3}, age at UAV is {10: 2, 11: 1, 12: 1}
mad_age_dest = {(10, 11): 3, (10, 12): 0, (11, 10): 6, (11, 12): 5, (12, 10): 3, (12, 11): 2}
updated_users = [[11, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 2, 11: 1, 12: 1} when the general UAV age was {10: 2, 11: 1, 12: 1}
users sampled under UAV 0 are [10, 12]
sampled_users = [10, 12]
updated_users are [[11, 10]], sampled_users = [10, 12], mad_action = [([10, 12], [[11, 10]])], actual_mad_action = 8


current episode = 4


 step = 7, mad selection is 8, actual action is [(10, 12), ([11, 10],)], updated_users = [[11, 10]], sampled_users = [10, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
for pair [11, 10], chance_update_loss = 0.91 and eval_env.update_loss = -1 
pair [11, 10] was selected to be updated. so pair [11, 10]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.76 and eval_env.sample_loss = -1 
slot =  6  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.81 and eval_env.sample_loss = -1 
slot =  6  - user  12  period =  1  was selected to sample and sampled
time = 7, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5, 7], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5, 6], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4, 6, 7]}
tx_attempt_UAV has become {10: [4], 11: [5], 12: [5]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [1]}

 step = 7 of episode 4 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 6, (10, 12): 3, (11, 10): 2, (11, 12): 7, (12, 10): 5, (12, 11): 4} with sum = 27, tx_attempt_UAV = {10: [4], 11: [5], 12: [5]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [1], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 14
episode_wise_success_sample = 14
episode_wise_attempt_update = 6
episode_wise_success_update = 6
age difference of users at dest is {(10, 11): 5, (10, 12): 2, (11, 10): 0, (11, 12): 5, (12, 10): 4, (12, 11): 3} where age at dest is {(10, 11): 6, (10, 12): 3, (11, 10): 2, (11, 12): 7, (12, 10): 5, (12, 11): 4}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 5, (10, 12): 2, (11, 10): 0, (11, 12): 5, (12, 10): 4, (12, 11): 3}
updated_users = [[11, 12]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 10]
sampled_users = [11, 10]
updated_users are [[11, 12]], sampled_users = [10, 11], mad_action = [([11, 10], [[11, 12]])], actual_mad_action = 3


current episode = 4


 step = 8, mad selection is 3, actual action is [(10, 11), ([11, 12],)], updated_users = [[11, 12]], sampled_users = [10, 11]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
for pair [11, 12], chance_update_loss = 0.35 and eval_env.update_loss = -1 
pair [11, 12] was selected to be updated. so pair [11, 12]'s age at dest will become 11's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=3
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.03 and eval_env.sample_loss = -1 
slot =  7  - user  10  period =  1  was selected to sample and sampled
 for user 11, chance_sample_loss = 0.46 and eval_env.sample_loss = -1 
slot =  7  - user  11  period =  1  was selected to sample and sampled
user  12  was not sampled
time = 8, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5, 7, 8], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5, 6, 8], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4, 6, 7]}
tx_attempt_UAV has become {10: [5], 11: [6], 12: [5]} and tx_attempt_dest has become {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}

 step = 8 of episode 4 ended, UAV_age = {10: 1, 11: 1, 12: 2} with sum = 4, dest_age = {(10, 11): 7, (10, 12): 4, (11, 10): 3, (11, 12): 3, (12, 10): 6, (12, 11): 5} with sum = 28, tx_attempt_UAV = {10: [5], 11: [6], 12: [5]}, tx_attempt_dest = {(10, 11): [1], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 16
episode_wise_success_sample = 16
episode_wise_attempt_update = 7
episode_wise_success_update = 7
age difference of users at dest is {(10, 11): 6, (10, 12): 3, (11, 10): 2, (11, 12): 2, (12, 10): 4, (12, 11): 3} where age at dest is {(10, 11): 7, (10, 12): 4, (11, 10): 3, (11, 12): 3, (12, 10): 6, (12, 11): 5}, age at UAV is {10: 1, 11: 1, 12: 2}
mad_age_dest = {(10, 11): 6, (10, 12): 3, (11, 10): 2, (11, 12): 2, (12, 10): 4, (12, 11): 3}
updated_users = [[10, 11]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 1, 12: 2} when the general UAV age was {10: 1, 11: 1, 12: 2}
users sampled under UAV 0 are [12, 10]
sampled_users = [12, 10]
updated_users are [[10, 11]], sampled_users = [10, 12], mad_action = [([12, 10], [[10, 11]])], actual_mad_action = 6


current episode = 4


 step = 9, mad selection is 6, actual action is [(10, 12), ([10, 11],)], updated_users = [[10, 11]], sampled_users = [10, 12]
for pair [10, 11], chance_update_loss = 0.94 and eval_env.update_loss = -1 
pair [10, 11] was selected to be updated. so pair [10, 11]'s age at dest will become 10's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
pair  [12, 10]  was not updated
pair  [12, 11]  was not updated
 for user 10, chance_sample_loss = 0.41 and eval_env.sample_loss = -1 
slot =  8  - user  10  period =  1  was selected to sample and sampled
user  11  was not sampled
 for user 12, chance_sample_loss = 0.87 and eval_env.sample_loss = -1 
slot =  8  - user  12  period =  1  was selected to sample and sampled
time = 9, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5, 7, 8, 9], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5, 6, 8], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4, 6, 7, 9]}
tx_attempt_UAV has become {10: [6], 11: [6], 12: [6]} and tx_attempt_dest has become {(10, 11): [2], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}

 step = 9 of episode 4 ended, UAV_age = {10: 1, 11: 2, 12: 1} with sum = 4, dest_age = {(10, 11): 2, (10, 12): 5, (11, 10): 4, (11, 12): 4, (12, 10): 7, (12, 11): 6} with sum = 28, tx_attempt_UAV = {10: [6], 11: [6], 12: [6]}, tx_attempt_dest = {(10, 11): [2], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [1], (12, 11): [1]}
episode_wise_attempt_sample = 18
episode_wise_success_sample = 18
episode_wise_attempt_update = 8
episode_wise_success_update = 8
age difference of users at dest is {(10, 11): 1, (10, 12): 4, (11, 10): 2, (11, 12): 2, (12, 10): 6, (12, 11): 5} where age at dest is {(10, 11): 2, (10, 12): 5, (11, 10): 4, (11, 12): 4, (12, 10): 7, (12, 11): 6}, age at UAV is {10: 1, 11: 2, 12: 1}
mad_age_dest = {(10, 11): 1, (10, 12): 4, (11, 10): 2, (11, 12): 2, (12, 10): 6, (12, 11): 5}
updated_users = [[12, 10]]
under UAV 0, users covered are [10, 11, 12] and their ages are {10: 1, 11: 2, 12: 1} when the general UAV age was {10: 1, 11: 2, 12: 1}
users sampled under UAV 0 are [11, 12]
sampled_users = [11, 12]
updated_users are [[12, 10]], sampled_users = [11, 12], mad_action = [([11, 12], [[12, 10]])], actual_mad_action = 16


current episode = 4


 step = 10, mad selection is 16, actual action is [(11, 12), ([12, 10],)], updated_users = [[12, 10]], sampled_users = [11, 12]
pair  [10, 11]  was not updated
pair  [10, 12]  was not updated
pair  [11, 10]  was not updated
pair  [11, 12]  was not updated
for pair [12, 10], chance_update_loss = 0.91 and eval_env.update_loss = -1 
pair [12, 10] was selected to be updated. so pair [12, 10]'s age at dest will become 12's age at the UAV +1, i.e. eval_env.UAV_age[i[0]]+1=2
pair  [12, 11]  was not updated
user  10  was not sampled
 for user 11, chance_sample_loss = 0.93 and eval_env.sample_loss = -1 
slot =  9  - user  11  period =  1  was selected to sample and sampled
 for user 12, chance_sample_loss = 0.82 and eval_env.sample_loss = -1 
slot =  9  - user  12  period =  1  was selected to sample and sampled
time = 10, sample_time = {10: [2, 4, 6, 8, 9, 1, 3, 4, 6, 7, 8, 10, 2, 3, 4, 6, 7, 8, 9, 1, 2, 4, 5, 6, 8, 9, 2, 3, 5, 7, 8, 9], 11: [1, 3, 5, 7, 9, 10, 2, 3, 5, 6, 8, 9, 10, 1, 2, 4, 5, 7, 9, 10, 2, 3, 4, 6, 7, 8, 10, 1, 2, 4, 5, 6, 8, 10], 12: [1, 2, 3, 4, 5, 6, 7, 8, 10, 1, 2, 4, 5, 7, 9, 1, 3, 5, 6, 8, 10, 1, 3, 5, 7, 9, 10, 1, 3, 4, 6, 7, 9, 10]}
tx_attempt_UAV has become {10: [6], 11: [7], 12: [7]} and tx_attempt_dest has become {(10, 11): [2], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [2], (12, 11): [1]}

 step = 10 of episode 4 ended, UAV_age = {10: 2, 11: 1, 12: 1} with sum = 4, dest_age = {(10, 11): 3, (10, 12): 6, (11, 10): 5, (11, 12): 5, (12, 10): 2, (12, 11): 7} with sum = 28, tx_attempt_UAV = {10: [6], 11: [7], 12: [7]}, tx_attempt_dest = {(10, 11): [2], (10, 12): [1], (11, 10): [1], (11, 12): [2], (12, 10): [2], (12, 11): [1]}
episode_wise_attempt_sample = 20
episode_wise_success_sample = 20
episode_wise_attempt_update = 9
episode_wise_success_update = 9
age_dist_UAV = {10: [2, 1, 2, 2, 2], 11: [1, 1, 1, 1, 1], 12: [1, 2, 1, 1, 1]}, age_dist_dest = {(10, 11): [7, 5, 2, 7, 3], (10, 12): [5, 8, 5, 5, 6], (11, 10): [6, 3, 7, 3, 5], (11, 12): [2, 6, 4, 3, 5], (12, 10): [3, 4, 6, 6, 2], (12, 11): [4, 2, 3, 4, 7]}
results for step 10 of episode 4
attempt_sample = [20, 20, 20, 20, 20]
success_sample = [20, 20, 20, 20, 20]
attempt_update = [9, 9, 9, 9, 9]
success_update = [9, 9, 9, 9, 9]

*****************************************************


MAD scheduling  RP  placement,  3  users - avg of final_step_rewards =  27.6  MIN and MAX of final_step_rewards =  27 ,  28  and avg of overall_ep_reward =  236.4  : end with final state of  [1 1 1 1 1 1 1 1 1 1]  with shape  (10,)
3 users under MAD scheduling and RP placement are over


